defmodule Mixduty.Incidents do
  import Mixduty
  @path "incidents"

  @moduledoc """
  An incident is a normalized, de-duplicated event generated by a PagerDuty integration. It can be thought of as a problem or an issue within your service that needs to be addressed and resolved.

  Incidents can be `triggered`, `acknowledged`, or `resolved`, and are assigned to a user based on the service's escalation policy.

  A triggered incident prompts a notification to be sent to the currently on-call user(s) as defined in the escalation policy used by the service. Incidents are triggered through the Events API.

  Updates to an incident generate log entries that capture the changes to an incident over time, whether these changes were prompted by a user, an integration, or were performed automatically.
  """

  @doc """
  List incidents of an account
  #### Example
      Mixduty.Incidents.list(client)
  """
  def list(client, params \\ [], options \\ []) do
    get("#{@path}", client, params, options)
  end

  @doc """
  Create an incident
  #### Example
      Mixduty.Incidents.create("Server is on fire", "P00PBUG", "user@pagerduty.com", client)
  """
  def create(title, service_id, from, client, options \\ %{}) do
    incident_body =
      %{
        title: title,
        service: %{
          id: service_id,
          type: "service_reference"
        }
      }
      |> Map.merge(options)

    body = %{incident: incident_body}
    client = Map.put(client, :headers, client.headers ++ [{"From", from}])
    post("#{@path}", client, body)
  end

  @doc """
  Get an incident
  #### Example
      Mixduty.Incidents.incident("P00PBUG", client)
  """
  def incident(id, client, params \\ [], options \\ []) do
    get("#{@path}/#{id}", client, params, options)
  end

  @doc """
  List log entries of an incident
  #### Example
      Mixduty.Incidents.log_entries("P00PBUG", client)
  """
  def log_entries(incident_id, client, params \\ [], options \\ []) do
    @path
    |> Path.join(incident_id)
    |> Path.join("log_entries")
    |> get(client, params, options)
  end

  @doc """
  Create an incident note
  #### Example
      Mixduty.Incidents.create_note("This is a note describing details", "P00PBUG", "user@pagerduty.com", client)
  """
  def create_note(note, incident_id, from, client) do
    body = %{
      note: %{
        content: note
      }
    }

    client = Map.put(client, :headers, client.headers ++ [{"From", from}])

    @path
    |> Path.join(incident_id)
    |> Path.join("notes")
    |> post(client, body)
  end

  @doc """
  Get list of notification subscribers
  #### Examples
      - Mixduty.Incident.list_notification_subscribers(client, "P00PBUG")
      - Mixduty.Client.new(token)
        |> Mixduty.Incident.list_notification_subscribers("P00PBUG")
  """
  def list_notification_subscribers(client, incident_id) do
    @path
    |> Path.join(incident_id)
    |> Path.join("status_updates")
    |> Path.join("subscribers")
    |> get(client)
  end

  @doc """
  Get list of business services impacted by the incident
  #### Early Access
      This endpoint is in Early Access and may change at any time. You must pass into client the X-EARLY-ACCESS=business-impact-early-access header into client to access it.
  #### Example
      Mixduty.Incident.list_business_services_impacted(client, "P00PBUG")

  """
  def list_business_services_impacted(client, incident_id) do
    @path
    |> Path.join(incident_id)
    |> Path.join("business_services")
    |> Path.join("impacts")
    |> get(client)
  end

  @doc """
  Create an incident stakeholder status update
  #### Examples
      Mixdity.Incident.create_status_update(client, "P00PBUG", "This is status update")
  """
  @spec create_status_update(
          client :: Mixduty.Client.t(),
          incident_id :: Stringt.t(),
          status_update :: String.t()
        ) ::
          %{required(:status_code) => integer(), required(:data) => map()}
          | {:error, any()}
          | {:error, String.t(), any()}
  def create_status_update(client, incident_id, status_update) do
    body = %{
      message: status_update
    }

    @path
    |> Path.join(incident_id)
    |> Path.join("status_updates")
    |> post(client, body)
  end
end
